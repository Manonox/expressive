//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from x://coding//gamedev//other//expressive//Expressive//grammar//Expressive.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IExpressiveListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class ExpressiveBaseListener : IExpressiveListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.chunk"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterChunk([NotNull] ExpressiveParser.ChunkContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.chunk"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitChunk([NotNull] ExpressiveParser.ChunkContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] ExpressiveParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] ExpressiveParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.statement_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement_list([NotNull] ExpressiveParser.Statement_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.statement_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement_list([NotNull] ExpressiveParser.Statement_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] ExpressiveParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] ExpressiveParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.let_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLet_statement([NotNull] ExpressiveParser.Let_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.let_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLet_statement([NotNull] ExpressiveParser.Let_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.assign_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssign_statement([NotNull] ExpressiveParser.Assign_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.assign_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssign_statement([NotNull] ExpressiveParser.Assign_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.compound_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompound_statement([NotNull] ExpressiveParser.Compound_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.compound_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompound_statement([NotNull] ExpressiveParser.Compound_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.if_else_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIf_else_statement([NotNull] ExpressiveParser.If_else_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.if_else_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIf_else_statement([NotNull] ExpressiveParser.If_else_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.for_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFor_statement([NotNull] ExpressiveParser.For_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.for_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFor_statement([NotNull] ExpressiveParser.For_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.while_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhile_statement([NotNull] ExpressiveParser.While_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.while_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhile_statement([NotNull] ExpressiveParser.While_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.loop_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLoop_statement([NotNull] ExpressiveParser.Loop_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.loop_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLoop_statement([NotNull] ExpressiveParser.Loop_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.return_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturn_statement([NotNull] ExpressiveParser.Return_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.return_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturn_statement([NotNull] ExpressiveParser.Return_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.simple_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimple_expression([NotNull] ExpressiveParser.Simple_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.simple_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimple_expression([NotNull] ExpressiveParser.Simple_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] ExpressiveParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] ExpressiveParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.postfix"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostfix([NotNull] ExpressiveParser.PostfixContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.postfix"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostfix([NotNull] ExpressiveParser.PostfixContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCall([NotNull] ExpressiveParser.CallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCall([NotNull] ExpressiveParser.CallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.index"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndex([NotNull] ExpressiveParser.IndexContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.index"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndex([NotNull] ExpressiveParser.IndexContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.terrorist_if"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerrorist_if([NotNull] ExpressiveParser.Terrorist_ifContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.terrorist_if"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerrorist_if([NotNull] ExpressiveParser.Terrorist_ifContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.binding"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinding([NotNull] ExpressiveParser.BindingContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.binding"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinding([NotNull] ExpressiveParser.BindingContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.binding_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinding_list([NotNull] ExpressiveParser.Binding_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.binding_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinding_list([NotNull] ExpressiveParser.Binding_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable([NotNull] ExpressiveParser.VariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable([NotNull] ExpressiveParser.VariableContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.function_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction_def([NotNull] ExpressiveParser.Function_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.function_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction_def([NotNull] ExpressiveParser.Function_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.lambda_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambda_def([NotNull] ExpressiveParser.Lambda_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.lambda_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambda_def([NotNull] ExpressiveParser.Lambda_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.compound_op"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompound_op([NotNull] ExpressiveParser.Compound_opContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.compound_op"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompound_op([NotNull] ExpressiveParser.Compound_opContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
