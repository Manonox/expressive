//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from x://coding//gamedev//other//expressive//Expressive//grammar//Expressive.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExpressiveParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IExpressiveListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.chunk"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterChunk([NotNull] ExpressiveParser.ChunkContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.chunk"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitChunk([NotNull] ExpressiveParser.ChunkContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] ExpressiveParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] ExpressiveParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement_list([NotNull] ExpressiveParser.Statement_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement_list([NotNull] ExpressiveParser.Statement_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] ExpressiveParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] ExpressiveParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.let_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLet_statement([NotNull] ExpressiveParser.Let_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.let_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLet_statement([NotNull] ExpressiveParser.Let_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.assign_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_statement([NotNull] ExpressiveParser.Assign_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.assign_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_statement([NotNull] ExpressiveParser.Assign_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.compound_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompound_statement([NotNull] ExpressiveParser.Compound_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.compound_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompound_statement([NotNull] ExpressiveParser.Compound_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.if_else_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_else_statement([NotNull] ExpressiveParser.If_else_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.if_else_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_else_statement([NotNull] ExpressiveParser.If_else_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.for_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_statement([NotNull] ExpressiveParser.For_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.for_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_statement([NotNull] ExpressiveParser.For_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile_statement([NotNull] ExpressiveParser.While_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile_statement([NotNull] ExpressiveParser.While_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.loop_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoop_statement([NotNull] ExpressiveParser.Loop_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.loop_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoop_statement([NotNull] ExpressiveParser.Loop_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn_statement([NotNull] ExpressiveParser.Return_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn_statement([NotNull] ExpressiveParser.Return_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.simple_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimple_expression([NotNull] ExpressiveParser.Simple_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.simple_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimple_expression([NotNull] ExpressiveParser.Simple_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] ExpressiveParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] ExpressiveParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.postfix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostfix([NotNull] ExpressiveParser.PostfixContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.postfix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostfix([NotNull] ExpressiveParser.PostfixContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall([NotNull] ExpressiveParser.CallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall([NotNull] ExpressiveParser.CallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.index"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndex([NotNull] ExpressiveParser.IndexContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.index"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndex([NotNull] ExpressiveParser.IndexContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.terrorist_if"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerrorist_if([NotNull] ExpressiveParser.Terrorist_ifContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.terrorist_if"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerrorist_if([NotNull] ExpressiveParser.Terrorist_ifContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinding([NotNull] ExpressiveParser.BindingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinding([NotNull] ExpressiveParser.BindingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinding_list([NotNull] ExpressiveParser.Binding_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinding_list([NotNull] ExpressiveParser.Binding_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] ExpressiveParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] ExpressiveParser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.function_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_def([NotNull] ExpressiveParser.Function_defContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.function_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_def([NotNull] ExpressiveParser.Function_defContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.lambda_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambda_def([NotNull] ExpressiveParser.Lambda_defContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.lambda_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambda_def([NotNull] ExpressiveParser.Lambda_defContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressiveParser.compound_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompound_op([NotNull] ExpressiveParser.Compound_opContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressiveParser.compound_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompound_op([NotNull] ExpressiveParser.Compound_opContext context);
}
