//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from x://coding//gamedev//other//expressive//Expressive//grammar//Expressive.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ExpressiveParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, IDENTIFIER=15, INT=16, 
		FLOAT=17, STRING=18, COMMENT=19, MULTI_COMMENT=20, WS=21, LEFT_PARENTHESIS=22, 
		RIGHT_PARENTHESIS=23, LEFT_BRACKET=24, RIGHT_BRACKET=25, LEFT_BRACE=26, 
		RIGHT_BRACE=27, NIL=28, FALSE=29, TRUE=30, ADD=31, SUB=32, MUL=33, DIV=34, 
		MOD=35, POW=36, NOT=37, BITWISE_NOT=38, BITWISE_LEFT_SHIFT=39, BITWISE_RIGHT_SHIFT=40, 
		RANGE=41, INCLUSIVE_RANGE=42, LESS=43, LESS_OR_EQUALS=44, GREATER=45, 
		GREATER_OR_EQUALS=46, EQUALS=47, NOT_EQUALS=48, BITWISE_AND=49, BITWISE_XOR=50, 
		BITWISE_OR=51, AND=52, OR=53, OR_ASSIGNMENT=54, AND_ASSIGNMENT=55, ADD_ASSIGNMENT=56, 
		SUB_ASSIGNMENT=57, MUL_ASSIGNMENT=58, DIV_ASSIGNMENT=59, MOD_ASSIGNMENT=60, 
		POW_ASSIGNMENT=61, BITWISE_OR_ASSIGNMENT=62, BITWISE_AND_ASSIGNMENT=63, 
		BITWISE_XOR_ASSIGNMENT=64, BITWISE_LEFT_SHIFT_ASSIGNMENT=65, BITWISE_RIGHT_SHIFT_ASSIGNMENT=66;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_statement_list = 2, RULE_statement = 3, 
		RULE_let_statement = 4, RULE_assign_statement = 5, RULE_compound_statement = 6, 
		RULE_if_else_statement = 7, RULE_for_statement = 8, RULE_while_statement = 9, 
		RULE_loop_statement = 10, RULE_return_statement = 11, RULE_simple_expression = 12, 
		RULE_expression = 13, RULE_postfix = 14, RULE_call = 15, RULE_index = 16, 
		RULE_terrorist_if = 17, RULE_binding = 18, RULE_binding_list = 19, RULE_variable = 20, 
		RULE_function_def = 21, RULE_lambda_def = 22, RULE_compound_op = 23;
	public static readonly string[] ruleNames = {
		"chunk", "block", "statement_list", "statement", "let_statement", "assign_statement", 
		"compound_statement", "if_else_statement", "for_statement", "while_statement", 
		"loop_statement", "return_statement", "simple_expression", "expression", 
		"postfix", "call", "index", "terrorist_if", "binding", "binding_list", 
		"variable", "function_def", "lambda_def", "compound_op"
	};

	private static readonly string[] _LiteralNames = {
		null, "'let'", "'global'", "'='", "'if'", "'else'", "'for'", "'in'", "'while'", 
		"'loop'", "'return'", "','", "':'", "'fn'", "'->'", null, null, null, 
		null, null, null, null, "'('", "')'", "'['", "']'", "'{'", "'}'", "'nil'", 
		"'false'", "'true'", "'+'", "'-'", "'*'", "'/'", "'%'", "'**'", "'!'", 
		"'~'", "'<<'", "'>>'", "'..'", "'..='", "'<'", "'<='", "'>'", "'>='", 
		"'=='", "'!='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'||='", "'&&='", 
		"'+='", "'-='", "'*='", "'/='", "'%='", "'**='", "'|='", "'&='", "'^='", 
		"'<<='", "'>>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "IDENTIFIER", "INT", "FLOAT", "STRING", "COMMENT", "MULTI_COMMENT", 
		"WS", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"LEFT_BRACE", "RIGHT_BRACE", "NIL", "FALSE", "TRUE", "ADD", "SUB", "MUL", 
		"DIV", "MOD", "POW", "NOT", "BITWISE_NOT", "BITWISE_LEFT_SHIFT", "BITWISE_RIGHT_SHIFT", 
		"RANGE", "INCLUSIVE_RANGE", "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", 
		"EQUALS", "NOT_EQUALS", "BITWISE_AND", "BITWISE_XOR", "BITWISE_OR", "AND", 
		"OR", "OR_ASSIGNMENT", "AND_ASSIGNMENT", "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", 
		"MUL_ASSIGNMENT", "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", "POW_ASSIGNMENT", 
		"BITWISE_OR_ASSIGNMENT", "BITWISE_AND_ASSIGNMENT", "BITWISE_XOR_ASSIGNMENT", 
		"BITWISE_LEFT_SHIFT_ASSIGNMENT", "BITWISE_RIGHT_SHIFT_ASSIGNMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expressive.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressiveParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressiveParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressiveParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ChunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExpressiveParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			statement_list();
			State = 49;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(ExpressiveParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(ExpressiveParser.RIGHT_BRACE, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(LEFT_BRACE);
			State = 52;
			statement_list();
			State = 53;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2252218376365906L) != 0)) {
				{
				{
				State = 55;
				statement();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Let_statementContext let_statement() {
			return GetRuleContext<Let_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_statementContext assign_statement() {
			return GetRuleContext<Assign_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_else_statementContext if_else_statement() {
			return GetRuleContext<If_else_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_statementContext loop_statement() {
			return GetRuleContext<Loop_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61;
				let_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62;
				assign_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63;
				compound_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 64;
				expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 65;
				block();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 66;
				if_else_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 67;
				for_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 68;
				while_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 69;
				loop_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 70;
				return_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 71;
				function_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindingContext binding() {
			return GetRuleContext<BindingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Let_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterLet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitLet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Let_statementContext let_statement() {
		Let_statementContext _localctx = new Let_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_let_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(T__0);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 75;
				Match(T__1);
				}
			}

			State = 78;
			binding();
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 79;
				Match(T__2);
				State = 80;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterAssign_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitAssign_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_statementContext assign_statement() {
		Assign_statementContext _localctx = new Assign_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_assign_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			variable();
			State = 84;
			Match(T__2);
			State = 85;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_opContext compound_op() {
			return GetRuleContext<Compound_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Compound_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterCompound_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitCompound_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_statementContext compound_statement() {
		Compound_statementContext _localctx = new Compound_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_compound_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			variable();
			State = 88;
			compound_op();
			State = 89;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_else_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public If_else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_else_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterIf_else_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitIf_else_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_else_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_else_statementContext if_else_statement() {
		If_else_statementContext _localctx = new If_else_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_if_else_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(T__3);
			State = 92;
			expression(0);
			State = 93;
			block();
			State = 101;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 94;
					Match(T__4);
					State = 95;
					Match(T__3);
					State = 96;
					expression(0);
					State = 97;
					block();
					}
					} 
				}
				State = 103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 104;
				Match(T__4);
				State = 105;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindingContext binding() {
			return GetRuleContext<BindingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_for_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(T__5);
			State = 109;
			binding();
			State = 110;
			Match(T__6);
			State = 111;
			expression(0);
			State = 112;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(T__7);
			State = 115;
			expression(0);
			State = 116;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterLoop_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitLoop_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_statementContext loop_statement() {
		Loop_statementContext _localctx = new Loop_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_loop_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(T__8);
			State = 119;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(T__9);
			State = 122;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(ExpressiveParser.NIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ExpressiveParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ExpressiveParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ExpressiveParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ExpressiveParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExpressiveParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExpressiveParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_defContext lambda_def() {
			return GetRuleContext<Lambda_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PARENTHESIS() { return GetToken(ExpressiveParser.LEFT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PARENTHESIS() { return GetToken(ExpressiveParser.RIGHT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Terrorist_ifContext terrorist_if() {
			return GetRuleContext<Terrorist_ifContext>(0);
		}
		public Simple_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterSimple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitSimple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_expressionContext simple_expression() {
		Simple_expressionContext _localctx = new Simple_expressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_simple_expression);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				Match(NIL);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125;
				Match(FALSE);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 126;
				Match(TRUE);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 127;
				Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 128;
				Match(FLOAT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 129;
				Match(STRING);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 7);
				{
				State = 130;
				Match(IDENTIFIER);
				}
				break;
			case T__12:
			case BITWISE_OR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 131;
				lambda_def();
				}
				break;
			case LEFT_PARENTHESIS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 132;
				Match(LEFT_PARENTHESIS);
				State = 133;
				expression(0);
				State = 134;
				Match(RIGHT_PARENTHESIS);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 10);
				{
				State = 136;
				terrorist_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixContext postfix() {
			return GetRuleContext<PostfixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ExpressiveParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ExpressiveParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_NOT() { return GetToken(ExpressiveParser.BITWISE_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext simple_expression() {
			return GetRuleContext<Simple_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(ExpressiveParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(ExpressiveParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ExpressiveParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ExpressiveParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ExpressiveParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_LEFT_SHIFT() { return GetToken(ExpressiveParser.BITWISE_LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_RIGHT_SHIFT() { return GetToken(ExpressiveParser.BITWISE_RIGHT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(ExpressiveParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUSIVE_RANGE() { return GetToken(ExpressiveParser.INCLUSIVE_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ExpressiveParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(ExpressiveParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ExpressiveParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(ExpressiveParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ExpressiveParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(ExpressiveParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_AND() { return GetToken(ExpressiveParser.BITWISE_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_XOR() { return GetToken(ExpressiveParser.BITWISE_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(ExpressiveParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ExpressiveParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ExpressiveParser.OR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 140;
				postfix();
				}
				break;
			case 2:
				{
				State = 141;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 416611827712L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 142;
				expression(14);
				}
				break;
			case 3:
				{
				State = 143;
				simple_expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 184;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 182;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 146;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 147;
						Match(POW);
						State = 148;
						expression(13);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 149;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 150;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60129542144L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 151;
						expression(13);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 152;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 153;
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 154;
						expression(12);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 155;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 156;
						_la = TokenStream.LA(1);
						if ( !(_la==BITWISE_LEFT_SHIFT || _la==BITWISE_RIGHT_SHIFT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 157;
						expression(11);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 158;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 159;
						_la = TokenStream.LA(1);
						if ( !(_la==RANGE || _la==INCLUSIVE_RANGE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 160;
						expression(10);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 161;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 162;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 131941395333120L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 163;
						expression(9);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 164;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 165;
						_la = TokenStream.LA(1);
						if ( !(_la==EQUALS || _la==NOT_EQUALS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 166;
						expression(8);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 167;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 168;
						Match(BITWISE_AND);
						State = 169;
						expression(7);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 170;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 171;
						Match(BITWISE_XOR);
						State = 172;
						expression(6);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 173;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 174;
						Match(BITWISE_OR);
						State = 175;
						expression(5);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 176;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 177;
						Match(AND);
						State = 178;
						expression(4);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 179;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 180;
						Match(OR);
						State = 181;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 186;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PostfixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext simple_expression() {
			return GetRuleContext<Simple_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public PostfixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterPostfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitPostfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixContext postfix() {
		PostfixContext _localctx = new PostfixContext(Context, State);
		EnterRule(_localctx, 28, RULE_postfix);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			simple_expression();
			State = 190;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 190;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LEFT_PARENTHESIS:
						{
						State = 188;
						call();
						}
						break;
					case LEFT_BRACKET:
						{
						State = 189;
						index();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PARENTHESIS() { return GetToken(ExpressiveParser.LEFT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PARENTHESIS() { return GetToken(ExpressiveParser.RIGHT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 30, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(LEFT_PARENTHESIS);
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2252218309255184L) != 0)) {
				{
				State = 195;
				expression(0);
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 196;
					Match(T__10);
					State = 197;
					expression(0);
					}
					}
					State = 202;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 205;
			Match(RIGHT_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(ExpressiveParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(ExpressiveParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 32, RULE_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(LEFT_BRACKET);
			{
			State = 208;
			expression(0);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10) {
				{
				{
				State = 209;
				Match(T__10);
				State = 210;
				expression(0);
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 216;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terrorist_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public Terrorist_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terrorist_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterTerrorist_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitTerrorist_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerrorist_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Terrorist_ifContext terrorist_if() {
		Terrorist_ifContext _localctx = new Terrorist_ifContext(Context, State);
		EnterRule(_localctx, 34, RULE_terrorist_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(T__3);
			State = 219;
			expression(0);
			State = 220;
			block();
			State = 221;
			Match(T__4);
			State = 222;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ExpressiveParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ExpressiveParser.IDENTIFIER, i);
		}
		public BindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterBinding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitBinding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingContext binding() {
		BindingContext _localctx = new BindingContext(Context, State);
		EnterRule(_localctx, 36, RULE_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(IDENTIFIER);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 225;
				Match(T__11);
				State = 226;
				Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binding_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindingContext[] binding() {
			return GetRuleContexts<BindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindingContext binding(int i) {
			return GetRuleContext<BindingContext>(i);
		}
		public Binding_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterBinding_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitBinding_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinding_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binding_listContext binding_list() {
		Binding_listContext _localctx = new Binding_listContext(Context, State);
		EnterRule(_localctx, 38, RULE_binding_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 229;
				binding();
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 230;
					Match(T__10);
					State = 231;
					binding();
					}
					}
					State = 236;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExpressiveParser.IDENTIFIER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 40, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ExpressiveParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ExpressiveParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PARENTHESIS() { return GetToken(ExpressiveParser.LEFT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Binding_listContext binding_list() {
			return GetRuleContext<Binding_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PARENTHESIS() { return GetToken(ExpressiveParser.RIGHT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Function_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_defContext function_def() {
		Function_defContext _localctx = new Function_defContext(Context, State);
		EnterRule(_localctx, 42, RULE_function_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(T__12);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 242;
				Match(T__1);
				}
			}

			State = 245;
			Match(IDENTIFIER);
			State = 246;
			Match(LEFT_PARENTHESIS);
			State = 247;
			binding_list();
			State = 248;
			Match(RIGHT_PARENTHESIS);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 249;
				Match(T__13);
				State = 250;
				Match(IDENTIFIER);
				}
			}

			State = 253;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PARENTHESIS() { return GetToken(ExpressiveParser.LEFT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Binding_listContext binding_list() {
			return GetRuleContext<Binding_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PARENTHESIS() { return GetToken(ExpressiveParser.RIGHT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExpressiveParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITWISE_OR() { return GetTokens(ExpressiveParser.BITWISE_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR(int i) {
			return GetToken(ExpressiveParser.BITWISE_OR, i);
		}
		public Lambda_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterLambda_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitLambda_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_defContext lambda_def() {
		Lambda_defContext _localctx = new Lambda_defContext(Context, State);
		EnterRule(_localctx, 44, RULE_lambda_def);
		int _la;
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				Match(T__12);
				State = 256;
				Match(LEFT_PARENTHESIS);
				State = 257;
				binding_list();
				State = 258;
				Match(RIGHT_PARENTHESIS);
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 259;
					Match(T__13);
					State = 260;
					Match(IDENTIFIER);
					}
				}

				State = 263;
				block();
				}
				break;
			case BITWISE_OR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265;
				Match(BITWISE_OR);
				State = 266;
				binding_list();
				State = 267;
				Match(BITWISE_OR);
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 268;
					Match(T__13);
					State = 269;
					Match(IDENTIFIER);
					}
				}

				State = 272;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGNMENT() { return GetToken(ExpressiveParser.OR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGNMENT() { return GetToken(ExpressiveParser.AND_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGNMENT() { return GetToken(ExpressiveParser.ADD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGNMENT() { return GetToken(ExpressiveParser.SUB_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGNMENT() { return GetToken(ExpressiveParser.MUL_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGNMENT() { return GetToken(ExpressiveParser.DIV_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGNMENT() { return GetToken(ExpressiveParser.MOD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW_ASSIGNMENT() { return GetToken(ExpressiveParser.POW_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR_ASSIGNMENT() { return GetToken(ExpressiveParser.BITWISE_OR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_AND_ASSIGNMENT() { return GetToken(ExpressiveParser.BITWISE_AND_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_XOR_ASSIGNMENT() { return GetToken(ExpressiveParser.BITWISE_XOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_LEFT_SHIFT_ASSIGNMENT() { return GetToken(ExpressiveParser.BITWISE_LEFT_SHIFT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_RIGHT_SHIFT_ASSIGNMENT() { return GetToken(ExpressiveParser.BITWISE_RIGHT_SHIFT_ASSIGNMENT, 0); }
		public Compound_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.EnterCompound_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressiveListener typedListener = listener as IExpressiveListener;
			if (typedListener != null) typedListener.ExitCompound_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressiveVisitor<TResult> typedVisitor = visitor as IExpressiveVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_opContext compound_op() {
		Compound_opContext _localctx = new Compound_opContext(Context, State);
		EnterRule(_localctx, 46, RULE_compound_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 8191L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,66,279,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,5,2,57,8,2,10,2,12,
		2,60,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,73,8,3,1,4,1,
		4,3,4,77,8,4,1,4,1,4,1,4,3,4,82,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,100,8,7,10,7,12,7,103,9,7,1,7,1,7,3,
		7,107,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,3,12,138,8,12,1,13,1,13,1,13,1,13,1,13,3,13,145,8,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,5,13,183,8,13,10,13,12,13,186,9,13,1,14,1,
		14,1,14,4,14,191,8,14,11,14,12,14,192,1,15,1,15,1,15,1,15,5,15,199,8,15,
		10,15,12,15,202,9,15,3,15,204,8,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,
		212,8,16,10,16,12,16,215,9,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
		1,18,1,18,1,18,3,18,228,8,18,1,19,1,19,1,19,5,19,233,8,19,10,19,12,19,
		236,9,19,3,19,238,8,19,1,20,1,20,1,21,1,21,3,21,244,8,21,1,21,1,21,1,21,
		1,21,1,21,1,21,3,21,252,8,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,3,
		22,262,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,271,8,22,1,22,1,22,
		3,22,275,8,22,1,23,1,23,1,23,0,1,26,24,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,0,8,2,0,32,32,37,38,1,0,33,35,1,0,
		31,32,1,0,39,40,1,0,41,42,1,0,43,46,1,0,47,48,1,0,54,66,305,0,48,1,0,0,
		0,2,51,1,0,0,0,4,58,1,0,0,0,6,72,1,0,0,0,8,74,1,0,0,0,10,83,1,0,0,0,12,
		87,1,0,0,0,14,91,1,0,0,0,16,108,1,0,0,0,18,114,1,0,0,0,20,118,1,0,0,0,
		22,121,1,0,0,0,24,137,1,0,0,0,26,144,1,0,0,0,28,187,1,0,0,0,30,194,1,0,
		0,0,32,207,1,0,0,0,34,218,1,0,0,0,36,224,1,0,0,0,38,237,1,0,0,0,40,239,
		1,0,0,0,42,241,1,0,0,0,44,274,1,0,0,0,46,276,1,0,0,0,48,49,3,4,2,0,49,
		50,5,0,0,1,50,1,1,0,0,0,51,52,5,26,0,0,52,53,3,4,2,0,53,54,5,27,0,0,54,
		3,1,0,0,0,55,57,3,6,3,0,56,55,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,
		1,0,0,0,59,5,1,0,0,0,60,58,1,0,0,0,61,73,3,8,4,0,62,73,3,10,5,0,63,73,
		3,12,6,0,64,73,3,26,13,0,65,73,3,2,1,0,66,73,3,14,7,0,67,73,3,16,8,0,68,
		73,3,18,9,0,69,73,3,20,10,0,70,73,3,22,11,0,71,73,3,42,21,0,72,61,1,0,
		0,0,72,62,1,0,0,0,72,63,1,0,0,0,72,64,1,0,0,0,72,65,1,0,0,0,72,66,1,0,
		0,0,72,67,1,0,0,0,72,68,1,0,0,0,72,69,1,0,0,0,72,70,1,0,0,0,72,71,1,0,
		0,0,73,7,1,0,0,0,74,76,5,1,0,0,75,77,5,2,0,0,76,75,1,0,0,0,76,77,1,0,0,
		0,77,78,1,0,0,0,78,81,3,36,18,0,79,80,5,3,0,0,80,82,3,26,13,0,81,79,1,
		0,0,0,81,82,1,0,0,0,82,9,1,0,0,0,83,84,3,40,20,0,84,85,5,3,0,0,85,86,3,
		26,13,0,86,11,1,0,0,0,87,88,3,40,20,0,88,89,3,46,23,0,89,90,3,26,13,0,
		90,13,1,0,0,0,91,92,5,4,0,0,92,93,3,26,13,0,93,101,3,2,1,0,94,95,5,5,0,
		0,95,96,5,4,0,0,96,97,3,26,13,0,97,98,3,2,1,0,98,100,1,0,0,0,99,94,1,0,
		0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,106,1,0,0,0,103,
		101,1,0,0,0,104,105,5,5,0,0,105,107,3,2,1,0,106,104,1,0,0,0,106,107,1,
		0,0,0,107,15,1,0,0,0,108,109,5,6,0,0,109,110,3,36,18,0,110,111,5,7,0,0,
		111,112,3,26,13,0,112,113,3,2,1,0,113,17,1,0,0,0,114,115,5,8,0,0,115,116,
		3,26,13,0,116,117,3,2,1,0,117,19,1,0,0,0,118,119,5,9,0,0,119,120,3,2,1,
		0,120,21,1,0,0,0,121,122,5,10,0,0,122,123,3,26,13,0,123,23,1,0,0,0,124,
		138,5,28,0,0,125,138,5,29,0,0,126,138,5,30,0,0,127,138,5,16,0,0,128,138,
		5,17,0,0,129,138,5,18,0,0,130,138,5,15,0,0,131,138,3,44,22,0,132,133,5,
		22,0,0,133,134,3,26,13,0,134,135,5,23,0,0,135,138,1,0,0,0,136,138,3,34,
		17,0,137,124,1,0,0,0,137,125,1,0,0,0,137,126,1,0,0,0,137,127,1,0,0,0,137,
		128,1,0,0,0,137,129,1,0,0,0,137,130,1,0,0,0,137,131,1,0,0,0,137,132,1,
		0,0,0,137,136,1,0,0,0,138,25,1,0,0,0,139,140,6,13,-1,0,140,145,3,28,14,
		0,141,142,7,0,0,0,142,145,3,26,13,14,143,145,3,24,12,0,144,139,1,0,0,0,
		144,141,1,0,0,0,144,143,1,0,0,0,145,184,1,0,0,0,146,147,10,13,0,0,147,
		148,5,36,0,0,148,183,3,26,13,13,149,150,10,12,0,0,150,151,7,1,0,0,151,
		183,3,26,13,13,152,153,10,11,0,0,153,154,7,2,0,0,154,183,3,26,13,12,155,
		156,10,10,0,0,156,157,7,3,0,0,157,183,3,26,13,11,158,159,10,9,0,0,159,
		160,7,4,0,0,160,183,3,26,13,10,161,162,10,8,0,0,162,163,7,5,0,0,163,183,
		3,26,13,9,164,165,10,7,0,0,165,166,7,6,0,0,166,183,3,26,13,8,167,168,10,
		6,0,0,168,169,5,49,0,0,169,183,3,26,13,7,170,171,10,5,0,0,171,172,5,50,
		0,0,172,183,3,26,13,6,173,174,10,4,0,0,174,175,5,51,0,0,175,183,3,26,13,
		5,176,177,10,3,0,0,177,178,5,52,0,0,178,183,3,26,13,4,179,180,10,2,0,0,
		180,181,5,53,0,0,181,183,3,26,13,3,182,146,1,0,0,0,182,149,1,0,0,0,182,
		152,1,0,0,0,182,155,1,0,0,0,182,158,1,0,0,0,182,161,1,0,0,0,182,164,1,
		0,0,0,182,167,1,0,0,0,182,170,1,0,0,0,182,173,1,0,0,0,182,176,1,0,0,0,
		182,179,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,27,
		1,0,0,0,186,184,1,0,0,0,187,190,3,24,12,0,188,191,3,30,15,0,189,191,3,
		32,16,0,190,188,1,0,0,0,190,189,1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,
		0,192,193,1,0,0,0,193,29,1,0,0,0,194,203,5,22,0,0,195,200,3,26,13,0,196,
		197,5,11,0,0,197,199,3,26,13,0,198,196,1,0,0,0,199,202,1,0,0,0,200,198,
		1,0,0,0,200,201,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,203,195,1,0,0,
		0,203,204,1,0,0,0,204,205,1,0,0,0,205,206,5,23,0,0,206,31,1,0,0,0,207,
		208,5,24,0,0,208,213,3,26,13,0,209,210,5,11,0,0,210,212,3,26,13,0,211,
		209,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,216,1,
		0,0,0,215,213,1,0,0,0,216,217,5,25,0,0,217,33,1,0,0,0,218,219,5,4,0,0,
		219,220,3,26,13,0,220,221,3,2,1,0,221,222,5,5,0,0,222,223,3,2,1,0,223,
		35,1,0,0,0,224,227,5,15,0,0,225,226,5,12,0,0,226,228,5,15,0,0,227,225,
		1,0,0,0,227,228,1,0,0,0,228,37,1,0,0,0,229,234,3,36,18,0,230,231,5,11,
		0,0,231,233,3,36,18,0,232,230,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,
		234,235,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,237,229,1,0,0,0,237,238,
		1,0,0,0,238,39,1,0,0,0,239,240,5,15,0,0,240,41,1,0,0,0,241,243,5,13,0,
		0,242,244,5,2,0,0,243,242,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,
		246,5,15,0,0,246,247,5,22,0,0,247,248,3,38,19,0,248,251,5,23,0,0,249,250,
		5,14,0,0,250,252,5,15,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,253,1,0,
		0,0,253,254,3,2,1,0,254,43,1,0,0,0,255,256,5,13,0,0,256,257,5,22,0,0,257,
		258,3,38,19,0,258,261,5,23,0,0,259,260,5,14,0,0,260,262,5,15,0,0,261,259,
		1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,264,3,2,1,0,264,275,1,0,0,
		0,265,266,5,51,0,0,266,267,3,38,19,0,267,270,5,51,0,0,268,269,5,14,0,0,
		269,271,5,15,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,
		3,2,1,0,273,275,1,0,0,0,274,255,1,0,0,0,274,265,1,0,0,0,275,45,1,0,0,0,
		276,277,7,7,0,0,277,47,1,0,0,0,23,58,72,76,81,101,106,137,144,182,184,
		190,192,200,203,213,227,234,237,243,251,261,270,274
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
